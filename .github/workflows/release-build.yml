name: Build releases

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        default: 'url_updates'
        required: true

jobs:
  build:
    name: Build ${{ matrix.tag }} Version
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        tag:
          - lts
          - current

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Init centos rootfs
      run: |
        wget -q https://github.com/sbwml/kernel-latest-centos/releases/download/rootfs/rootfs.tar.xz
        tar xf rootfs.tar.xz && rm -f rootfs.tar.xz
        echo "rootfs=$(pwd)/rootfs" >> "$GITHUB_ENV"
        sudo mount -o bind /dev rootfs/dev
        sudo mount -t proc /proc rootfs/proc
        sudo mount -t sysfs /sys rootfs/sys

    - name: Check Node Version
      run: |
        TAGS=$(curl -sk https://api.github.com/repos/charvey77/node-latest-centos/tags | grep "name")
        if [[ ${{ matrix.tag }} == "lts" ]]; then
            LATEST_VERSION=$(curl -s "https://api.github.com/repos/nodejs/node/releases" | grep 'Version.*LTS' | sed '/body/d' | head -1 | grep -oP "(?<=Version )\d+\.\d+\.\d+")
            echo "PRE_RELEASE=false" >> "$GITHUB_ENV"
        else
            LATEST_VERSION=$(curl -s "https://api.github.com/repos/nodejs/node/releases" | grep 'Version.*Current'| sed '/body/d' | head -1 | grep -oP "(?<=Version )\d+\.\d+\.\d+")
            echo "PRE_RELEASE=true" >> "$GITHUB_ENV"
        fi
        if [[ "$TAGS" == *"$LATEST_VERSION"* ]]; then
            echo -e " \n\e[1;32mnode-v$LATEST_VERSION is already the latest version.\e[0m\n"
            exit 0
        else
            echo "VERSION=$LATEST_VERSION" >> "$GITHUB_ENV"
            echo "next=true" >> "$GITHUB_ENV"
        fi

    - name: Verify build.sh script
      run: |
        ls -l build.sh
        cat build.sh

    - name: Copy build.sh to chroot
      run: |
        sudo cp build.sh ${{ env.rootfs }}/build.sh

    - name: Debug file paths
      run: |
        sudo ls -l ${{ env.rootfs }}
        sudo ls -l ${{ env.rootfs }}/etc/yum.repos.d
        sudo ls -l ${{ env.rootfs }}/build.sh

    - name: Verify wget in chroot
      run: |
        sudo chroot ${{ env.rootfs }} /bin/bash -c "[ -x /usr/bin/wget ] && echo 'wget is available' || echo 'wget is not available'"

    - name: Make build.sh executable
      run: |
        sudo chmod +x ${{ env.rootfs }}/build.sh

    - name: Verify required tools in chroot
      run: |
        sudo chroot ${{ env.rootfs }} /bin/bash -c "[ -x /usr/bin/tar ] && echo 'tar is available' || echo 'tar is not available'"
        sudo chroot ${{ env.rootfs }} /bin/bash -c "[ -x /usr/bin/xz ] && echo 'xz is available' || echo 'xz is not available'"

    - name: Run build.sh in chroot
      run: |
        sudo chroot ${{ env.rootfs }} /bin/bash -c "/build.sh"
